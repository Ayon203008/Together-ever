import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import clientPromise from "@/lib/mongodb";
import bcrypt from "bcryptjs";

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        const client = await clientPromise;
        const db = client.db("Together-ever");
        const user = await db.collection("users").findOne({ email: credentials.email });

        if (!user) return null;

        const isValid = await bcrypt.compare(credentials.password, user.password);
        if (!isValid) return null;

        // üî• ‡¶è‡¶ñ‡¶æ‡¶®‡ßá role-‡¶∏‡¶π ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã
        return {
          id: user._id.toString(),
          name: user.name,
          email: user.email,
          role: user.role || "user", // ‡¶Ø‡¶¶‡¶ø role ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá default "user"
        };
      },
    }),
  ],

  session: { strategy: "jwt" },
  secret: process.env.NEXTAUTH_SECRET,
  pages: { signIn: "/login" },

  callbacks: {
    // JWT ‡¶§‡ßá role ‡¶∞‡¶æ‡¶ñ‡ßã
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.role = user.role; // role ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
      }
      return token;
    },

    // Session-‡¶è role ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡¶∞‡ßã
    async session({ session, token }) {
      session.user.id = token.id;
      session.user.role = token.role; // ‡¶è‡¶ñ‡¶® session.user.role ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
